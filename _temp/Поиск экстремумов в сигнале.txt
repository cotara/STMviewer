QVector <QVector<double>> firFilter::extrFind(QByteArray &in,int len){
    int frontIndex=0,frontValue=0,straightCount=0;
    unsigned char ch,chPrev;
    double upVal=0, downVal=0;
    QVector <double> maxmin, x,tempVect;
    QVector <QVector<double>> result;
    double tempPeriod1, tempPeriod2;

    chPrev=in.at(0);                                                 // Запоминаем первую точку
    for(int j=1;j<len;j++){                                          //Обход начинаем со второй
       ch=in.at(j);                                                  //Сохраняем первую точку в переменную ch
       if(ch==chPrev){                                               //Если значение не растет и не убывает
           straightCount++;                                          //Увеличиваем соответствующий счетчик
           continue;                                                 //Пропускаем шаг цикла
       }
       if(ch>chPrev){                                               //Если текущее значение больше предыдущего, это значит, что график пошел вверх
            if(abs(ch-chPrev)<100)                                  //Проверка на резкий скачок фильтра в начале (Если это не глюк фильтра (не слишком резко))
                upVal+=ch-chPrev;                                   //Суммируем на сколько вырос график
            if(downVal>7){                                          //Если это первое возрастание после убывания (downVal!=0), и величина убывания больше некоторого значения (7), это значит, что найден минимум
                x.append(j-1-straightCount/2);                      //Запоминаем x координату минимума. (j-1-straightCount/2) означает размещение точки посередине пярмого участка, если он есть
                maxmin.append(chPrev);                              //Запоминаем занчением минимума
            }
            downVal=0;                                              //Обнуляем значение убывания графика
            straightCount=0;                                        //Обнуляем счетчик прямого движения графика
       }
       else if(ch<chPrev){                                          //Если текущее значение меньше предыдущего, это значит, что график пошел вниз
            if(abs(ch-chPrev)<100)                                  //Проверка на резкий скачок фильтра в начале (Если это не глюк фильтра (не слишком резко))
                downVal+=chPrev-ch;                                 //Суммируем на сколько опустился график
            if(upVal>7){                                            //Если это первое убывание после возрастания (upVal!=0), и величина возрастания больше некоторого значения (7), это значит, что найден максимум
                if(chPrev>frontValue){                              //Если найденный максимум больше, чем frontValue - значение потенциального фронта
                   frontIndex=x.size();                             //Запоминаем индекс нового фронта
                   frontValue=chPrev;                               //Запоминаем значение нового фронта
                }
                x.append(j-1-straightCount/2);                      //Запоминаем x координату максимума. (j-1-straightCount/2) означает размещение точки посередине пярмого участка, если он есть
                maxmin.append(chPrev);                              //Запоминаем занчением максимума
            }
            upVal=0;                                                //Обнуляем значение возрастания графика
            straightCount=0;                                        //Обнуляем счетчик прямого движения графика
       }
       chPrev=ch;                                                   //Сохраняем текущее значение в предыдущее
    }
    //Постобработка
    //Ищем всплески на плато
    //У нас в наличии уже есть координата фронта и его з начение
    if (maxmin.at(frontIndex)-maxmin.at(frontIndex+1) < 20){        //Если кочка (минимум) после фронта отличается не более чем на 20 единиц от фронта, то это не нужный экстремум, а фейковый всвлеск
        x.remove(frontIndex+1,2);                                   //Удаляем два следующих экстремума (минимум и максимум)
        maxmin.remove(frontIndex+1,2);
    }

    //Выделяем из всех найденных экстремумов только 3 до фронта и 3 после фронта
    //Проверяем, если 3 экстремумов до или после нет, то выводим ошибку, что экстремумов недостаточно.
    if(frontIndex<3 || (x.size()-1 - frontIndex)<3)
      qDebug() << "not enough extremes!!!";
    else{                                                                                                           //Здесь алгоритм, который позволяет сохранить именно 3 подряд идущих экстремумов
        double normPeriod = (x.at(frontIndex-1)-x.at(frontIndex-2) + x.at(frontIndex+2)-x.at(frontIndex+1))/2;     // Находим размер нормального периода(от фронта до предыдущего экстремума).
        //Сохраняем первые максимумы слева и справа
        //Ниже процесс формирования двумерного массива из координаты и значения экстремума
        tempVect.append(x.at(frontIndex-1));
        tempVect.append(maxmin.at(frontIndex-1));
        result.push_back(tempVect);
        tempVect.clear();
        tempVect.append(x.at(frontIndex+1));
        tempVect.append(maxmin.at(frontIndex+1));
        result.push_back(tempVect);
        tempVect.clear();
        //Сохраняем остальные 4 экстремума в двумерный массив
        for(int i=0;i<2;i++){
            tempPeriod1 = x.at(frontIndex-i-1)-x.at(frontIndex-i-2);                          //Считаем расстояние до следующих экстремумов
            tempPeriod2 = x.at(frontIndex+i+2)-x.at(frontIndex+i+1);
            tempVect.append(x.at(frontIndex-i-2));
            tempVect.append(maxmin.at(frontIndex-i-2));
            result.push_back(tempVect);
            tempVect.clear();
            tempVect.append(x.at(frontIndex+i+2));
            tempVect.append(maxmin.at(frontIndex+i+2));
            result.push_back(tempVect);
            tempVect.clear();
            if(normPeriod*1.5<tempPeriod1 && normPeriod*1.5<tempPeriod2)                     //Если текущий экстремум отдален от предыдущего на величину в 1,5 раз большую, чем normPeriod, то считаем этот экстремум не последовательным
                qDebug() << "Invalid Extremes #" + QString::number(i+2);
        }
    }
    return result;
}